
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://assets-cdn.github.com">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">



  <meta name="viewport" content="initial-scale=1.0,user-scalable=no,maximum-scale=1,width=device-width">
  <meta name="viewport" content="initial-scale=1.0,user-scalable=no,maximum-scale=1" media="(device-height: 568px)">
  <meta name="selected-link" value="repo_source">

  
<meta name="octolytics-dimension-device" content="mobile" />
<meta name="octolytics-dimension-user_id" content="4343403" /><meta name="octolytics-dimension-user_login" content="chinoogawa" /><meta name="octolytics-dimension-repository_id" content="15218683" /><meta name="octolytics-dimension-repository_nwo" content="chinoogawa/fbht" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="15218683" /><meta name="octolytics-dimension-repository_network_root_nwo" content="chinoogawa/fbht" /><meta name="octolytics-dimension-repository_explore_github_marketplace_ci_cta_shown" content="false" />


<meta name="octolytics-host" content="collector.githubapp.com" /><meta name="octolytics-app-id" content="github" /><meta name="octolytics-event-url" content="https://collector.githubapp.com/github-external/browser_event" /><meta name="octolytics-dimension-request_id" content="6456:7D42:B7BEF:155067:5BCD4E03" /><meta name="octolytics-dimension-region_edge" content="iad" /><meta name="octolytics-dimension-region_render" content="iad" /><meta name="octolytics-actor-id" content="44348666" /><meta name="octolytics-actor-login" content="Laratutors" /><meta name="octolytics-actor-hash" content="bb32af2019db588506bafd15a9671875bbc989f3831d2e1b7696d17bc381294d" />
<meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true" />



    <meta name="google-analytics" content="UA-3769691-2">

  <meta class="js-ga-set" name="userId" content="101ec04cc1511d3ae6d6b2eec576e026" %>

<meta class="js-ga-set" name="dimension1" content="Logged In">

  <meta class="js-ga-set" name="dimension3" content="mobile">


  

  <title>fbht/community.py at master Â· chinoogawa/fbht</title>

  <link crossorigin="anonymous" media="all" integrity="sha512-bx1vLXTAi7xgAHHOuC1IUjb8oPPfUtFE44qrR8cDqaMKnyuyw+uI/AIxSwMpDXUcg6Dg1wsAzQucOzyoW+nXgA==" rel="stylesheet" href="https://assets-cdn.github.com/assets/mobile-8f356e9dba0dd50a11d4f9f905dbb30b.css" />


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" class="js-site-favicon" href="https://assets-cdn.github.com/favicon.ico">

<meta name="theme-color" content="#1e2327">



  <link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="page-responsive">
    


  <header class="Header f5 lh-default clearfix">
    <div class="p-responsive flex-justify-between">
        <div class="d-flex flex-justify-between flex-items-center position-absolute right-0 left-0 px-3 mt-1">
          <div class="d-flex mx-2"><!-- placeholder for hamburger --></div>
          <div class="px-3 overflow-hidden">
                <div class="css-truncate css-truncate-target width-fit">
    <svg class="octicon octicon-repo" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
    <strong>
      <a class="text-white" href="/chinoogawa">chinoogawa</a>
    </strong> /
    <strong>
      <a class="text-white" href="/chinoogawa/fbht">fbht</a>
    </strong>
  </div>

          </div>

          <div class="d-flex">
            
              <a class="position-relative notification-indicator ml-3" href="/notifications"
                    aria-label="You have no unread notifications"
                  data-ga-click="Mobile, tap, location:header; text:Notifications">
                <span class="mail-status "></span>
                <svg height="16" class="octicon octicon-bell" viewBox="0 0 14 16" version="1.1" width="14" aria-hidden="true"><path fill-rule="evenodd" d="M13.99 11.991v1H0v-1l.73-.58c.769-.769.809-2.547 1.189-4.416.77-3.767 4.077-4.996 4.077-4.996 0-.55.45-1 .999-1 .55 0 1 .45 1 1 0 0 3.387 1.229 4.156 4.996.38 1.879.42 3.657 1.19 4.417l.659.58h-.01zM6.995 15.99c1.11 0 1.999-.89 1.999-1.999H4.996c0 1.11.89 1.999 1.999 1.999z"/></svg>
              </a>
          </div>
        </div>


        <details class="details-reset">
          <summary class="mt-1 float-left position-relative user-select-none" data-ga-click="Mobile, tap, location:header; text:Hamburger">
            <svg height="24" class="octicon octicon-three-bars notification-indicator" viewBox="0 0 12 16" version="1.1" width="18" aria-hidden="true"><path fill-rule="evenodd" d="M11.41 9H.59C0 9 0 8.59 0 8c0-.59 0-1 .59-1H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1h.01zm0-4H.59C0 5 0 4.59 0 4c0-.59 0-1 .59-1H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1h.01zM.59 11H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1H.59C0 13 0 12.59 0 12c0-.59 0-1 .59-1z"/></svg>
          </summary>
              <div style="clear: both;">
        <div class="py-3">
          <div class="header-search scoped-search site-scoped-search js-site-search position-relative "
  role="search"
>
  <div class="position-relative">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-site-search-form" data-scope-type="Repository" data-scope-id="15218683" data-scoped-search-url="/chinoogawa/fbht/search" data-unscoped-search-url="/search" action="/chinoogawa/fbht/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
      <label class="form-control header-search-wrapper  js-chromeless-input-container">
            <a class="header-search-scope no-underline" href="/chinoogawa/fbht/blob/master/community.py">This repository</a>
        <input type="text"
          class="form-control header-search-input  js-site-search-focus js-site-search-field is-clearable"
          data-hotkey="s,/"
          name="q"
          value=""
          placeholder="Search"
          data-unscoped-placeholder="Search GitHub"
          data-scoped-placeholder="Search"
          autocapitalize="off"
          aria-label="Search this repository"
          >
          <input type="hidden" class="js-site-search-type-field" name="type" >
      </label>
</form>  </div>
</div>

        </div>
      <ul class="text-bold list-style-none p-0 m-0">
            <li>
              <a href="/" data-ga-click="Mobile, tap, location:header; text:Dashboard" class="js-selected-navigation-item HeaderNavlink py-2 mt-3">
                Dashboard
              </a>
            </li>
            <li>
              <a class="js-selected-navigation-item HeaderNavlink py-2" href="/pulls">
                Pull requests
</a>            </li>
            <li>
              <a class="js-selected-navigation-item HeaderNavlink py-2" href="/issues">
                Issues
</a>            </li>
              <li>
                <a class="js-selected-navigation-item HeaderNavlink py-2" data-ga-click="Mobile, tap, location:header; text:Marketplace" href="/marketplace">
                  Marketplace
</a>              </li>
          <li>
            <a href="/explore" data-ga-click="Mobile, tap, location:header; text:Explore" class="js-selected-navigation-item HeaderNavlink py-2">
              Explore
            </a>
          </li>
            <li>
              <a href="/Laratutors" data-ga-click="Mobile, tap, location:header; text:User avatar" class="js-selected-navigation-item HeaderNavlink py-2">
                <img class="avatar" src="https://avatars2.githubusercontent.com/u/44348666?s=40&amp;v=4" width="20" height="20" alt="@Laratutors" />
                Laratutors
              </a>
            </li>
            <li>
              <a href="/logout" data-ga-click="Mobile, tap, location:header; text:Sign out" class="HeaderNavlink py-2" style="padding-left: 2px;">
                <svg style="margin-right: 2px;" class="octicon octicon-sign-out v-align-middle" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11.992 8.994V6.996H7.995v-2h3.997V2.999l3.998 2.998-3.998 2.998zm-1.998 2.998H5.996V2.998L2 1h7.995v2.998h1V1c0-.55-.45-.999-1-.999H.999A1.001 1.001 0 0 0 0 1v11.372c0 .39.22.73.55.91L5.996 16v-3.008h3.998c.55 0 1-.45 1-1V7.995h-1v3.997z"/></svg>
                Sign out
              </a>
            </li>
      </ul>
    </div>

        </details>
    </div>
  </header>

    



    




<div class="reponav-wrapper lh-default">
  <nav class="reponav js-reponav"
       itemscope
       itemtype="http://schema.org/BreadcrumbList">

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a class="js-selected-navigation-item selected reponav-item" itemprop="url" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages /chinoogawa/fbht" href="/chinoogawa/fbht">
        <span itemprop="name">Code</span>
        <meta itemprop="position" content="1">
</a>    </span>

      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_issues repo_labels repo_milestones /chinoogawa/fbht/issues" href="/chinoogawa/fbht/issues">
          <span itemprop="name">Issues</span>
          <span class="Counter">3</span>
          <meta itemprop="position" content="2">
</a>      </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_pulls checks /chinoogawa/fbht/pulls" href="/chinoogawa/fbht/pulls">
        <span itemprop="name">Pull requests</span>
        <span class="Counter">0</span>
        <meta itemprop="position" content="3">
</a>    </span>

      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links=" /chinoogawa/fbht/projects" href="/chinoogawa/fbht/projects">
          <span itemprop="name">Projects</span>
          <span class="Counter">0</span>
          <meta itemprop="position" content="4">
</a>      </span>

      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links=" /chinoogawa/fbht/wiki" href="/chinoogawa/fbht/wiki">
          <span itemprop="name">Wiki</span>
          <meta itemprop="position" content="5">
</a>      </span>

    <a class="js-selected-navigation-item reponav-item" data-selected-links="pulse /chinoogawa/fbht/pulse" href="/chinoogawa/fbht/pulse">
      Pulse
</a>
  </nav>
</div>

<div id="js-flash-container">


</div>




<div class="breadcrumb blob-breadcrumb">
  <label for="blob-history-checkbox" class="blob-history-label">
    <svg class="octicon octicon-history" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 13H6V6h5v2H8v5zM7 1C4.81 1 2.87 2.02 1.59 3.59L0 2v4h4L2.5 4.5C3.55 3.17 5.17 2.3 7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-.34.03-.67.09-1H.08C.03 7.33 0 7.66 0 8c0 3.86 3.14 7 7 7s7-3.14 7-7-3.14-7-7-7z"/></svg>
  </label>
  <span class="filetype-icon"><svg class="octicon octicon-file" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6 5H2V4h4v1zM2 8h7V7H2v1zm0 2h7V9H2v1zm0 2h7v-1H2v1zm10-7.5V14c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V2c0-.55.45-1 1-1h7.5L12 4.5zM11 5L8 2H1v12h10V5z"/></svg></span>
  <strong class="final-path">community.py</strong>
</div>


<input id="blob-history-checkbox"
       class="js-blob-history-checkbox blob-history-checkbox"
       type="checkbox"
       data-url="/chinoogawa/fbht/latest_commit/master/community.py">

<div class="blob-history">
  <a class="js-blob-history-link" href="/chinoogawa/fbht/commits/master/community.py">
    Loading latest commitâ¦
</a></div>

  <div class="blob-file-content js-file-line-container">
    <div class="highlighted-blob tab-size" data-tab-size="8"><div class="code-body highlight"><pre><div class='line js-file-line' id='LC1'><span class="pl-c"><span class="pl-c">#</span>!/usr/bin/python</span></div><div class='line js-file-line' id='LC2'><span class="pl-c"><span class="pl-c">#</span> -*- coding: utf-8 -*-</span></div><div class='line js-file-line' id='LC3'><span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC4'><span class="pl-s">This module implements community detection.</span></div><div class='line js-file-line' id='LC5'><span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC6'><span class="pl-c1">__all__</span> <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">&quot;</span>partition_at_level<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>modularity<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>best_partition<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>generate_dendogram<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>induced_graph<span class="pl-pds">&quot;</span></span>]</div><div class='line js-file-line' id='LC7'>__author__ <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Thomas Aynaud (thomas.aynaud@lip6.fr)<span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC8'><span class="pl-c"><span class="pl-c">#</span>    Copyright (C) 2009 by</span></div><div class='line js-file-line' id='LC9'><span class="pl-c"><span class="pl-c">#</span>    Thomas Aynaud &lt;thomas.aynaud@lip6.fr&gt;</span></div><div class='line js-file-line' id='LC10'><span class="pl-c"><span class="pl-c">#</span>    All rights reserved.</span></div><div class='line js-file-line' id='LC11'><span class="pl-c"><span class="pl-c">#</span>    BSD license.</span></div><div class='line js-file-line' id='LC12'><br></div><div class='line js-file-line' id='LC13'><span class="pl-c1">__PASS_MAX</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span></div><div class='line js-file-line' id='LC14'><span class="pl-c1">__MIN</span> <span class="pl-k">=</span> <span class="pl-c1">0.0000001</span></div><div class='line js-file-line' id='LC15'><br></div><div class='line js-file-line' id='LC16'><span class="pl-k">import</span> networkx <span class="pl-k">as</span> nx</div><div class='line js-file-line' id='LC17'><span class="pl-k">import</span> sys</div><div class='line js-file-line' id='LC18'><span class="pl-k">import</span> types</div><div class='line js-file-line' id='LC19'><span class="pl-k">import</span> array</div><div class='line js-file-line' id='LC20'><br></div><div class='line js-file-line' id='LC21'><br></div><div class='line js-file-line' id='LC22'><span class="pl-k">def</span> <span class="pl-en">partition_at_level</span>(<span class="pl-smi">dendogram</span>, <span class="pl-smi">level</span>) :</div><div class='line js-file-line' id='LC23'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Return the partition of the nodes at the given level</span></div><div class='line js-file-line' id='LC24'><span class="pl-s"></span></div><div class='line js-file-line' id='LC25'><span class="pl-s">    A dendogram is a tree and each level is a partition of the graph nodes.</span></div><div class='line js-file-line' id='LC26'><span class="pl-s">    Level 0 is the first partition, which contains the smallest communities, and the best is len(dendogram) - 1.</span></div><div class='line js-file-line' id='LC27'><span class="pl-s">    The higher the level is, the bigger are the communities</span></div><div class='line js-file-line' id='LC28'><span class="pl-s"></span></div><div class='line js-file-line' id='LC29'><span class="pl-s">    Parameters</span></div><div class='line js-file-line' id='LC30'><span class="pl-s">    ----------</span></div><div class='line js-file-line' id='LC31'><span class="pl-s">    dendogram : list of dict</span></div><div class='line js-file-line' id='LC32'><span class="pl-s">       a list of partitions, ie dictionnaries where keys of the i+1 are the values of the i.</span></div><div class='line js-file-line' id='LC33'><span class="pl-s">    level : int</span></div><div class='line js-file-line' id='LC34'><span class="pl-s">       the level which belongs to [0..len(dendogram)-1]</span></div><div class='line js-file-line' id='LC35'><span class="pl-s"></span></div><div class='line js-file-line' id='LC36'><span class="pl-s">    Returns</span></div><div class='line js-file-line' id='LC37'><span class="pl-s">    -------</span></div><div class='line js-file-line' id='LC38'><span class="pl-s">    partition : dictionnary</span></div><div class='line js-file-line' id='LC39'><span class="pl-s">       A dictionary where keys are the nodes and the values are the set it belongs to</span></div><div class='line js-file-line' id='LC40'><span class="pl-s"></span></div><div class='line js-file-line' id='LC41'><span class="pl-s">    Raises</span></div><div class='line js-file-line' id='LC42'><span class="pl-s">    ------</span></div><div class='line js-file-line' id='LC43'><span class="pl-s">    KeyError</span></div><div class='line js-file-line' id='LC44'><span class="pl-s">       If the dendogram is not well formed or the level is too high</span></div><div class='line js-file-line' id='LC45'><span class="pl-s"></span></div><div class='line js-file-line' id='LC46'><span class="pl-s">    See Also</span></div><div class='line js-file-line' id='LC47'><span class="pl-s">    --------</span></div><div class='line js-file-line' id='LC48'><span class="pl-s">    best_partition which directly combines partition_at_level and generate_dendogram to obtain the partition of highest modularity</span></div><div class='line js-file-line' id='LC49'><span class="pl-s"></span></div><div class='line js-file-line' id='LC50'><span class="pl-s">    Examples</span></div><div class='line js-file-line' id='LC51'><span class="pl-s">    --------</span></div><div class='line js-file-line' id='LC52'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>G=nx.erdos_renyi_graph(100, 0.01)</span></div><div class='line js-file-line' id='LC53'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>dendo = generate_dendogram(G)</span></div><div class='line js-file-line' id='LC54'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>for level in range(len(dendo) - 1) :</span></div><div class='line js-file-line' id='LC55'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>    print &quot;partition at level&quot;, level, &quot;is&quot;, partition_at_level(dendo, level)</span></div><div class='line js-file-line' id='LC56'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC57'>&nbsp;&nbsp;&nbsp;&nbsp;partition <span class="pl-k">=</span> dendogram[<span class="pl-c1">0</span>].copy()</div><div class='line js-file-line' id='LC58'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> index <span class="pl-k">in</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>, level <span class="pl-k">+</span> <span class="pl-c1">1</span>) :</div><div class='line js-file-line' id='LC59'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> node, community <span class="pl-k">in</span> partition.iteritems() :</div><div class='line js-file-line' id='LC60'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition[node] <span class="pl-k">=</span> dendogram[index][community]</div><div class='line js-file-line' id='LC61'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> partition</div><div class='line js-file-line' id='LC62'>&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC63'><br></div><div class='line js-file-line' id='LC64'><span class="pl-k">def</span> <span class="pl-en">modularity</span>(<span class="pl-smi">partition</span>, <span class="pl-smi">graph</span>) :</div><div class='line js-file-line' id='LC65'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Compute the modularity of a partition of a graph</span></div><div class='line js-file-line' id='LC66'><span class="pl-s"></span></div><div class='line js-file-line' id='LC67'><span class="pl-s">    Parameters</span></div><div class='line js-file-line' id='LC68'><span class="pl-s">    ----------</span></div><div class='line js-file-line' id='LC69'><span class="pl-s">    partition : dict</span></div><div class='line js-file-line' id='LC70'><span class="pl-s">       the partition of the nodes, i.e a dictionary where keys are their nodes and values the communities</span></div><div class='line js-file-line' id='LC71'><span class="pl-s">    graph : networkx.Graph</span></div><div class='line js-file-line' id='LC72'><span class="pl-s">       the networkx graph which is decomposed</span></div><div class='line js-file-line' id='LC73'><span class="pl-s"></span></div><div class='line js-file-line' id='LC74'><span class="pl-s">    Returns</span></div><div class='line js-file-line' id='LC75'><span class="pl-s">    -------</span></div><div class='line js-file-line' id='LC76'><span class="pl-s">    modularity : float</span></div><div class='line js-file-line' id='LC77'><span class="pl-s">       The modularity</span></div><div class='line js-file-line' id='LC78'><span class="pl-s"></span></div><div class='line js-file-line' id='LC79'><span class="pl-s">    Raises</span></div><div class='line js-file-line' id='LC80'><span class="pl-s">    ------</span></div><div class='line js-file-line' id='LC81'><span class="pl-s">    KeyError</span></div><div class='line js-file-line' id='LC82'><span class="pl-s">       If the partition is not a partition of all graph nodes</span></div><div class='line js-file-line' id='LC83'><span class="pl-s">    ValueError</span></div><div class='line js-file-line' id='LC84'><span class="pl-s">        If the graph has no link</span></div><div class='line js-file-line' id='LC85'><span class="pl-s">    TypeError</span></div><div class='line js-file-line' id='LC86'><span class="pl-s">        If graph is not a networkx.Graph</span></div><div class='line js-file-line' id='LC87'><span class="pl-s"></span></div><div class='line js-file-line' id='LC88'><span class="pl-s">    References</span></div><div class='line js-file-line' id='LC89'><span class="pl-s">    ----------</span></div><div class='line js-file-line' id='LC90'><span class="pl-s">    .. 1. Newman, M.E.J. &amp; Girvan, M. Finding and evaluating community structure in networks. Physical Review E 69, 26113(2004).</span></div><div class='line js-file-line' id='LC91'><span class="pl-s"></span></div><div class='line js-file-line' id='LC92'><span class="pl-s">    Examples</span></div><div class='line js-file-line' id='LC93'><span class="pl-s">    --------</span></div><div class='line js-file-line' id='LC94'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>G=nx.erdos_renyi_graph(100, 0.01)</span></div><div class='line js-file-line' id='LC95'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>part = best_partition(G)</span></div><div class='line js-file-line' id='LC96'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>modularity(part, G)</span></div><div class='line js-file-line' id='LC97'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC98'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> <span class="pl-c1">type</span>(graph) <span class="pl-k">!=</span> nx.Graph :</div><div class='line js-file-line' id='LC99'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">raise</span> <span class="pl-c1">TypeError</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Bad graph type, use only non directed graph<span class="pl-pds">&quot;</span></span>)</div><div class='line js-file-line' id='LC100'><br></div><div class='line js-file-line' id='LC101'>&nbsp;&nbsp;&nbsp;&nbsp;inc <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC102'>&nbsp;&nbsp;&nbsp;&nbsp;deg <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC103'>&nbsp;&nbsp;&nbsp;&nbsp;links <span class="pl-k">=</span> graph.size(<span class="pl-v">weight</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&#39;</span>weight<span class="pl-pds">&#39;</span></span>)</div><div class='line js-file-line' id='LC104'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> links <span class="pl-k">==</span> <span class="pl-c1">0</span> :</div><div class='line js-file-line' id='LC105'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">raise</span> <span class="pl-c1">ValueError</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>A graph without link has an undefined modularity<span class="pl-pds">&quot;</span></span>)</div><div class='line js-file-line' id='LC106'>&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC107'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> node <span class="pl-k">in</span> graph :</div><div class='line js-file-line' id='LC108'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com <span class="pl-k">=</span> partition[node]</div><div class='line js-file-line' id='LC109'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deg[com] <span class="pl-k">=</span> deg.get(com, <span class="pl-c1">0</span>.) <span class="pl-k">+</span> graph.degree(node, <span class="pl-v">weight</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>weight<span class="pl-pds">&#39;</span></span>)</div><div class='line js-file-line' id='LC110'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> neighbor, datas <span class="pl-k">in</span> graph[node].iteritems() :</div><div class='line js-file-line' id='LC111'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weight <span class="pl-k">=</span> datas.get(<span class="pl-s"><span class="pl-pds">&quot;</span>weight<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">1</span>)</div><div class='line js-file-line' id='LC112'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> partition[neighbor] <span class="pl-k">==</span> com :</div><div class='line js-file-line' id='LC113'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> neighbor <span class="pl-k">==</span> node :</div><div class='line js-file-line' id='LC114'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc[com] <span class="pl-k">=</span> inc.get(com, <span class="pl-c1">0</span>.) <span class="pl-k">+</span> <span class="pl-c1">float</span>(weight)</div><div class='line js-file-line' id='LC115'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">else</span> :</div><div class='line js-file-line' id='LC116'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc[com] <span class="pl-k">=</span> inc.get(com, <span class="pl-c1">0</span>.) <span class="pl-k">+</span> <span class="pl-c1">float</span>(weight) <span class="pl-k">/</span> <span class="pl-c1">2</span>.</div><div class='line js-file-line' id='LC117'><br></div><div class='line js-file-line' id='LC118'>&nbsp;&nbsp;&nbsp;&nbsp;res <span class="pl-k">=</span> <span class="pl-c1">0</span>.</div><div class='line js-file-line' id='LC119'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> com <span class="pl-k">in</span> <span class="pl-c1">set</span>(partition.values()) :</div><div class='line js-file-line' id='LC120'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res <span class="pl-k">+=</span> (inc.get(com, <span class="pl-c1">0</span>.) <span class="pl-k">/</span> links) <span class="pl-k">-</span> (deg.get(com, <span class="pl-c1">0</span>.) <span class="pl-k">/</span> (<span class="pl-c1">2</span>.<span class="pl-k">*</span>links))<span class="pl-k">**</span><span class="pl-c1">2</span></div><div class='line js-file-line' id='LC121'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> res</div><div class='line js-file-line' id='LC122'><br></div><div class='line js-file-line' id='LC123'><br></div><div class='line js-file-line' id='LC124'><span class="pl-k">def</span> <span class="pl-en">best_partition</span>(<span class="pl-smi">graph</span>, <span class="pl-smi">partition</span> <span class="pl-k">=</span> <span class="pl-c1">None</span>) :</div><div class='line js-file-line' id='LC125'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Compute the partition of the graph nodes which maximises the modularity</span></div><div class='line js-file-line' id='LC126'><span class="pl-s">    (or try..) using the Louvain heuristices</span></div><div class='line js-file-line' id='LC127'><span class="pl-s"></span></div><div class='line js-file-line' id='LC128'><span class="pl-s">    This is the partition of highest modularity, i.e. the highest partition of the dendogram</span></div><div class='line js-file-line' id='LC129'><span class="pl-s">    generated by the Louvain algorithm.</span></div><div class='line js-file-line' id='LC130'><span class="pl-s">    </span></div><div class='line js-file-line' id='LC131'><span class="pl-s">    Parameters</span></div><div class='line js-file-line' id='LC132'><span class="pl-s">    ----------</span></div><div class='line js-file-line' id='LC133'><span class="pl-s">    graph : networkx.Graph</span></div><div class='line js-file-line' id='LC134'><span class="pl-s">       the networkx graph which is decomposed</span></div><div class='line js-file-line' id='LC135'><span class="pl-s">    partition : dict, optionnal</span></div><div class='line js-file-line' id='LC136'><span class="pl-s">       the algorithm will start using this partition of the nodes. It&#39;s a dictionary where keys are their nodes and values the communities</span></div><div class='line js-file-line' id='LC137'><span class="pl-s"></span></div><div class='line js-file-line' id='LC138'><span class="pl-s">    Returns</span></div><div class='line js-file-line' id='LC139'><span class="pl-s">    -------</span></div><div class='line js-file-line' id='LC140'><span class="pl-s">    partition : dictionnary</span></div><div class='line js-file-line' id='LC141'><span class="pl-s">       The partition, with communities numbered from 0 to number of communities</span></div><div class='line js-file-line' id='LC142'><span class="pl-s"></span></div><div class='line js-file-line' id='LC143'><span class="pl-s">    Raises</span></div><div class='line js-file-line' id='LC144'><span class="pl-s">    ------</span></div><div class='line js-file-line' id='LC145'><span class="pl-s">    NetworkXError</span></div><div class='line js-file-line' id='LC146'><span class="pl-s">       If the graph is not Eulerian.</span></div><div class='line js-file-line' id='LC147'><span class="pl-s"></span></div><div class='line js-file-line' id='LC148'><span class="pl-s">    See Also</span></div><div class='line js-file-line' id='LC149'><span class="pl-s">    --------</span></div><div class='line js-file-line' id='LC150'><span class="pl-s">    generate_dendogram to obtain all the decompositions levels</span></div><div class='line js-file-line' id='LC151'><span class="pl-s"></span></div><div class='line js-file-line' id='LC152'><span class="pl-s">    Notes</span></div><div class='line js-file-line' id='LC153'><span class="pl-s">    -----</span></div><div class='line js-file-line' id='LC154'><span class="pl-s">    Uses Louvain algorithm</span></div><div class='line js-file-line' id='LC155'><span class="pl-s"></span></div><div class='line js-file-line' id='LC156'><span class="pl-s">    References</span></div><div class='line js-file-line' id='LC157'><span class="pl-s">    ----------</span></div><div class='line js-file-line' id='LC158'><span class="pl-s">    .. 1. Blondel, V.D. et al. Fast unfolding of communities in large networks. J. Stat. Mech 10008, 1-12(2008).</span></div><div class='line js-file-line' id='LC159'><span class="pl-s"></span></div><div class='line js-file-line' id='LC160'><span class="pl-s">    Examples</span></div><div class='line js-file-line' id='LC161'><span class="pl-s">    --------</span></div><div class='line js-file-line' id='LC162'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span> #Basic usage</span></div><div class='line js-file-line' id='LC163'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>G=nx.erdos_renyi_graph(100, 0.01)</span></div><div class='line js-file-line' id='LC164'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>part = best_partition(G)</span></div><div class='line js-file-line' id='LC165'><span class="pl-s">    </span></div><div class='line js-file-line' id='LC166'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>#other example to display a graph with its community :</span></div><div class='line js-file-line' id='LC167'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>#better with karate_graph() as defined in networkx examples</span></div><div class='line js-file-line' id='LC168'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>#erdos renyi don&#39;t have true community structure</span></div><div class='line js-file-line' id='LC169'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>G = nx.erdos_renyi_graph(30, 0.05)</span></div><div class='line js-file-line' id='LC170'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>#first compute the best partition</span></div><div class='line js-file-line' id='LC171'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>partition = community.best_partition(G)</span></div><div class='line js-file-line' id='LC172'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span> #drawing</span></div><div class='line js-file-line' id='LC173'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>size = float(len(set(partition.values())))</span></div><div class='line js-file-line' id='LC174'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>pos = nx.spring_layout(G)</span></div><div class='line js-file-line' id='LC175'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>count = 0.</span></div><div class='line js-file-line' id='LC176'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>for com in set(partition.values()) :</span></div><div class='line js-file-line' id='LC177'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>    count = count + 1.</span></div><div class='line js-file-line' id='LC178'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>    list_nodes = [nodes for nodes in partition.keys()</span></div><div class='line js-file-line' id='LC179'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>                                if partition[nodes] == com]</span></div><div class='line js-file-line' id='LC180'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>    nx.draw_networkx_nodes(G, pos, list_nodes, node_size = 20,</span></div><div class='line js-file-line' id='LC181'><span class="pl-s">                                    node_color = str(count / size))</span></div><div class='line js-file-line' id='LC182'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>nx.draw_networkx_edges(G,pos, alpha=0.5)</span></div><div class='line js-file-line' id='LC183'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>plt.show()</span></div><div class='line js-file-line' id='LC184'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC185'>&nbsp;&nbsp;&nbsp;&nbsp;dendo <span class="pl-k">=</span> generate_dendogram(graph, partition)</div><div class='line js-file-line' id='LC186'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> partition_at_level(dendo, <span class="pl-c1">len</span>(dendo) <span class="pl-k">-</span> <span class="pl-c1">1</span> )</div><div class='line js-file-line' id='LC187'><br></div><div class='line js-file-line' id='LC188'><br></div><div class='line js-file-line' id='LC189'><span class="pl-k">def</span> <span class="pl-en">generate_dendogram</span>(<span class="pl-smi">graph</span>, <span class="pl-smi">part_init</span> <span class="pl-k">=</span> <span class="pl-c1">None</span>) :</div><div class='line js-file-line' id='LC190'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Find communities in the graph and return the associated dendogram</span></div><div class='line js-file-line' id='LC191'><span class="pl-s"></span></div><div class='line js-file-line' id='LC192'><span class="pl-s">    A dendogram is a tree and each level is a partition of the graph nodes.  Level 0 is the first partition, which contains the smallest communities, and the best is len(dendogram) - 1. The higher the level is, the bigger are the communities</span></div><div class='line js-file-line' id='LC193'><span class="pl-s"></span></div><div class='line js-file-line' id='LC194'><span class="pl-s"></span></div><div class='line js-file-line' id='LC195'><span class="pl-s">    Parameters</span></div><div class='line js-file-line' id='LC196'><span class="pl-s">    ----------</span></div><div class='line js-file-line' id='LC197'><span class="pl-s">    graph : networkx.Graph</span></div><div class='line js-file-line' id='LC198'><span class="pl-s">        the networkx graph which will be decomposed</span></div><div class='line js-file-line' id='LC199'><span class="pl-s">    part_init : dict, optionnal</span></div><div class='line js-file-line' id='LC200'><span class="pl-s">        the algorithm will start using this partition of the nodes. It&#39;s a dictionary where keys are their nodes and values the communities</span></div><div class='line js-file-line' id='LC201'><span class="pl-s"></span></div><div class='line js-file-line' id='LC202'><span class="pl-s">    Returns</span></div><div class='line js-file-line' id='LC203'><span class="pl-s">    -------</span></div><div class='line js-file-line' id='LC204'><span class="pl-s">    dendogram : list of dictionaries</span></div><div class='line js-file-line' id='LC205'><span class="pl-s">        a list of partitions, ie dictionnaries where keys of the i+1 are the values of the i. and where keys of the first are the nodes of graph</span></div><div class='line js-file-line' id='LC206'><span class="pl-s">    </span></div><div class='line js-file-line' id='LC207'><span class="pl-s">    Raises</span></div><div class='line js-file-line' id='LC208'><span class="pl-s">    ------</span></div><div class='line js-file-line' id='LC209'><span class="pl-s">    TypeError</span></div><div class='line js-file-line' id='LC210'><span class="pl-s">        If the graph is not a networkx.Graph</span></div><div class='line js-file-line' id='LC211'><span class="pl-s"></span></div><div class='line js-file-line' id='LC212'><span class="pl-s">    See Also</span></div><div class='line js-file-line' id='LC213'><span class="pl-s">    --------</span></div><div class='line js-file-line' id='LC214'><span class="pl-s">    best_partition</span></div><div class='line js-file-line' id='LC215'><span class="pl-s"></span></div><div class='line js-file-line' id='LC216'><span class="pl-s">    Notes</span></div><div class='line js-file-line' id='LC217'><span class="pl-s">    -----</span></div><div class='line js-file-line' id='LC218'><span class="pl-s">    Uses Louvain algorithm</span></div><div class='line js-file-line' id='LC219'><span class="pl-s"></span></div><div class='line js-file-line' id='LC220'><span class="pl-s">    References</span></div><div class='line js-file-line' id='LC221'><span class="pl-s">    ----------</span></div><div class='line js-file-line' id='LC222'><span class="pl-s">    .. 1. Blondel, V.D. et al. Fast unfolding of communities in large networks. J. Stat. Mech 10008, 1-12(2008).</span></div><div class='line js-file-line' id='LC223'><span class="pl-s"></span></div><div class='line js-file-line' id='LC224'><span class="pl-s">    Examples</span></div><div class='line js-file-line' id='LC225'><span class="pl-s">    --------</span></div><div class='line js-file-line' id='LC226'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>G=nx.erdos_renyi_graph(100, 0.01)</span></div><div class='line js-file-line' id='LC227'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>dendo = generate_dendogram(G)</span></div><div class='line js-file-line' id='LC228'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>for level in range(len(dendo) - 1) :</span></div><div class='line js-file-line' id='LC229'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>    print &quot;partition at level&quot;, level, &quot;is&quot;, partition_at_level(dendo, level)</span></div><div class='line js-file-line' id='LC230'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC231'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> <span class="pl-c1">type</span>(graph) <span class="pl-k">!=</span> nx.Graph :</div><div class='line js-file-line' id='LC232'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">raise</span> <span class="pl-c1">TypeError</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Bad graph type, use only non directed graph<span class="pl-pds">&quot;</span></span>)</div><div class='line js-file-line' id='LC233'>&nbsp;&nbsp;&nbsp;&nbsp;current_graph <span class="pl-k">=</span> graph.copy()</div><div class='line js-file-line' id='LC234'>&nbsp;&nbsp;&nbsp;&nbsp;status <span class="pl-k">=</span> Status()</div><div class='line js-file-line' id='LC235'>&nbsp;&nbsp;&nbsp;&nbsp;status.init(current_graph, part_init)</div><div class='line js-file-line' id='LC236'>&nbsp;&nbsp;&nbsp;&nbsp;mod <span class="pl-k">=</span> __modularity(status)</div><div class='line js-file-line' id='LC237'>&nbsp;&nbsp;&nbsp;&nbsp;status_list <span class="pl-k">=</span> <span class="pl-c1">list</span>()</div><div class='line js-file-line' id='LC238'>&nbsp;&nbsp;&nbsp;&nbsp;__one_level(current_graph, status)</div><div class='line js-file-line' id='LC239'>&nbsp;&nbsp;&nbsp;&nbsp;new_mod <span class="pl-k">=</span> __modularity(status)</div><div class='line js-file-line' id='LC240'>&nbsp;&nbsp;&nbsp;&nbsp;partition <span class="pl-k">=</span> __renumber(status.node2com)</div><div class='line js-file-line' id='LC241'>&nbsp;&nbsp;&nbsp;&nbsp;status_list.append(partition)</div><div class='line js-file-line' id='LC242'>&nbsp;&nbsp;&nbsp;&nbsp;mod <span class="pl-k">=</span> new_mod</div><div class='line js-file-line' id='LC243'>&nbsp;&nbsp;&nbsp;&nbsp;current_graph <span class="pl-k">=</span> induced_graph(partition, current_graph)</div><div class='line js-file-line' id='LC244'>&nbsp;&nbsp;&nbsp;&nbsp;status.init(current_graph)</div><div class='line js-file-line' id='LC245'>&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC246'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">while</span> <span class="pl-c1">True</span> :</div><div class='line js-file-line' id='LC247'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__one_level(current_graph, status)</div><div class='line js-file-line' id='LC248'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_mod <span class="pl-k">=</span> __modularity(status)</div><div class='line js-file-line' id='LC249'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> new_mod <span class="pl-k">-</span> mod <span class="pl-k">&lt;</span> <span class="pl-c1">__MIN</span> :</div><div class='line js-file-line' id='LC250'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">break</span></div><div class='line js-file-line' id='LC251'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition <span class="pl-k">=</span> __renumber(status.node2com)</div><div class='line js-file-line' id='LC252'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status_list.append(partition)</div><div class='line js-file-line' id='LC253'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mod <span class="pl-k">=</span> new_mod</div><div class='line js-file-line' id='LC254'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current_graph <span class="pl-k">=</span> induced_graph(partition, current_graph)</div><div class='line js-file-line' id='LC255'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status.init(current_graph)</div><div class='line js-file-line' id='LC256'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> status_list[:]</div><div class='line js-file-line' id='LC257'><br></div><div class='line js-file-line' id='LC258'><br></div><div class='line js-file-line' id='LC259'><span class="pl-k">def</span> <span class="pl-en">induced_graph</span>(<span class="pl-smi">partition</span>, <span class="pl-smi">graph</span>) :</div><div class='line js-file-line' id='LC260'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Produce the graph where nodes are the communities</span></div><div class='line js-file-line' id='LC261'><span class="pl-s"></span></div><div class='line js-file-line' id='LC262'><span class="pl-s">    there is a link of weight w between communities if the sum of the weights of the links between their elements is w</span></div><div class='line js-file-line' id='LC263'><span class="pl-s"></span></div><div class='line js-file-line' id='LC264'><span class="pl-s">    Parameters</span></div><div class='line js-file-line' id='LC265'><span class="pl-s">    ----------</span></div><div class='line js-file-line' id='LC266'><span class="pl-s">    partition : dict</span></div><div class='line js-file-line' id='LC267'><span class="pl-s">       a dictionary where keys are graph nodes and  values the part the node belongs to</span></div><div class='line js-file-line' id='LC268'><span class="pl-s">    graph : networkx.Graph</span></div><div class='line js-file-line' id='LC269'><span class="pl-s">        the initial graph</span></div><div class='line js-file-line' id='LC270'><span class="pl-s"></span></div><div class='line js-file-line' id='LC271'><span class="pl-s">    Returns</span></div><div class='line js-file-line' id='LC272'><span class="pl-s">    -------</span></div><div class='line js-file-line' id='LC273'><span class="pl-s">    g : networkx.Graph</span></div><div class='line js-file-line' id='LC274'><span class="pl-s">       a networkx graph where nodes are the parts</span></div><div class='line js-file-line' id='LC275'><span class="pl-s"></span></div><div class='line js-file-line' id='LC276'><span class="pl-s">    Examples</span></div><div class='line js-file-line' id='LC277'><span class="pl-s">    --------</span></div><div class='line js-file-line' id='LC278'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>n = 5</span></div><div class='line js-file-line' id='LC279'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>g = nx.complete_graph(2*n)</span></div><div class='line js-file-line' id='LC280'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>part = dict([])</span></div><div class='line js-file-line' id='LC281'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>for node in g.nodes() :</span></div><div class='line js-file-line' id='LC282'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>    part[node] = node % 2</span></div><div class='line js-file-line' id='LC283'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>ind = induced_graph(part, g)</span></div><div class='line js-file-line' id='LC284'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>goal = nx.Graph()</span></div><div class='line js-file-line' id='LC285'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>goal.add_weighted_edges_from([(0,1,n*n),(0,0,n*(n-1)/2), (1, 1, n*(n-1)/2)])</span></div><div class='line js-file-line' id='LC286'><span class="pl-s">    <span class="pl-k">&gt;&gt;&gt; </span>nx.is_isomorphic(int, goal)</span></div><div class='line js-file-line' id='LC287'><span class="pl-s">    True</span></div><div class='line js-file-line' id='LC288'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC289'>&nbsp;&nbsp;&nbsp;&nbsp;ret <span class="pl-k">=</span> nx.Graph()</div><div class='line js-file-line' id='LC290'>&nbsp;&nbsp;&nbsp;&nbsp;ret.add_nodes_from(partition.values())</div><div class='line js-file-line' id='LC291'>&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC292'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> node1, node2, datas <span class="pl-k">in</span> graph.edges_iter(<span class="pl-v">data</span> <span class="pl-k">=</span> <span class="pl-c1">True</span>) :</div><div class='line js-file-line' id='LC293'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weight <span class="pl-k">=</span> datas.get(<span class="pl-s"><span class="pl-pds">&quot;</span>weight<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">1</span>)</div><div class='line js-file-line' id='LC294'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com1 <span class="pl-k">=</span> partition[node1]</div><div class='line js-file-line' id='LC295'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com2 <span class="pl-k">=</span> partition[node2]</div><div class='line js-file-line' id='LC296'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w_prec <span class="pl-k">=</span> ret.get_edge_data(com1, com2, {<span class="pl-s"><span class="pl-pds">&quot;</span>weight<span class="pl-pds">&quot;</span></span>:<span class="pl-c1">0</span>}).get(<span class="pl-s"><span class="pl-pds">&quot;</span>weight<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">1</span>)</div><div class='line js-file-line' id='LC297'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret.add_edge(com1, com2, <span class="pl-v">weight</span> <span class="pl-k">=</span> w_prec <span class="pl-k">+</span> weight)</div><div class='line js-file-line' id='LC298'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC299'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> ret</div><div class='line js-file-line' id='LC300'><br></div><div class='line js-file-line' id='LC301'><br></div><div class='line js-file-line' id='LC302'><span class="pl-k">def</span> <span class="pl-en">__renumber</span>(<span class="pl-smi">dictionary</span>) :</div><div class='line js-file-line' id='LC303'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Renumber the values of the dictionary from 0 to n</span></div><div class='line js-file-line' id='LC304'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC305'>&nbsp;&nbsp;&nbsp;&nbsp;count <span class="pl-k">=</span> <span class="pl-c1">0</span></div><div class='line js-file-line' id='LC306'>&nbsp;&nbsp;&nbsp;&nbsp;ret <span class="pl-k">=</span> dictionary.copy()</div><div class='line js-file-line' id='LC307'>&nbsp;&nbsp;&nbsp;&nbsp;new_values <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC308'>&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC309'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> key <span class="pl-k">in</span> dictionary.keys() :</div><div class='line js-file-line' id='LC310'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value <span class="pl-k">=</span> dictionary[key]</div><div class='line js-file-line' id='LC311'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_value <span class="pl-k">=</span> new_values.get(value, <span class="pl-k">-</span><span class="pl-c1">1</span>)</div><div class='line js-file-line' id='LC312'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> new_value <span class="pl-k">==</span> <span class="pl-k">-</span><span class="pl-c1">1</span> :</div><div class='line js-file-line' id='LC313'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_values[value] <span class="pl-k">=</span> count</div><div class='line js-file-line' id='LC314'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_value <span class="pl-k">=</span> count</div><div class='line js-file-line' id='LC315'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count <span class="pl-k">=</span> count <span class="pl-k">+</span> <span class="pl-c1">1</span></div><div class='line js-file-line' id='LC316'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[key] <span class="pl-k">=</span> new_value</div><div class='line js-file-line' id='LC317'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC318'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> ret</div><div class='line js-file-line' id='LC319'><br></div><div class='line js-file-line' id='LC320'><br></div><div class='line js-file-line' id='LC321'><span class="pl-k">def</span> <span class="pl-en">__load_binary</span>(<span class="pl-smi">data</span>) :</div><div class='line js-file-line' id='LC322'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Load binary graph as used by the cpp implementation of this algorithm</span></div><div class='line js-file-line' id='LC323'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC324'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> <span class="pl-c1">type</span>(data) <span class="pl-k">==</span> types.StringType :</div><div class='line js-file-line' id='LC325'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data <span class="pl-k">=</span> <span class="pl-c1">open</span>(data, <span class="pl-s"><span class="pl-pds">&quot;</span>rb<span class="pl-pds">&quot;</span></span>)</div><div class='line js-file-line' id='LC326'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC327'>&nbsp;&nbsp;&nbsp;&nbsp;reader <span class="pl-k">=</span> array.array(<span class="pl-s"><span class="pl-pds">&quot;</span>I<span class="pl-pds">&quot;</span></span>)</div><div class='line js-file-line' id='LC328'>&nbsp;&nbsp;&nbsp;&nbsp;reader.fromfile(data, <span class="pl-c1">1</span>)</div><div class='line js-file-line' id='LC329'>&nbsp;&nbsp;&nbsp;&nbsp;num_nodes <span class="pl-k">=</span> reader.pop()</div><div class='line js-file-line' id='LC330'>&nbsp;&nbsp;&nbsp;&nbsp;reader <span class="pl-k">=</span> array.array(<span class="pl-s"><span class="pl-pds">&quot;</span>I<span class="pl-pds">&quot;</span></span>)</div><div class='line js-file-line' id='LC331'>&nbsp;&nbsp;&nbsp;&nbsp;reader.fromfile(data, num_nodes)</div><div class='line js-file-line' id='LC332'>&nbsp;&nbsp;&nbsp;&nbsp;cum_deg <span class="pl-k">=</span> reader.tolist()</div><div class='line js-file-line' id='LC333'>&nbsp;&nbsp;&nbsp;&nbsp;num_links <span class="pl-k">=</span> reader.pop()</div><div class='line js-file-line' id='LC334'>&nbsp;&nbsp;&nbsp;&nbsp;reader <span class="pl-k">=</span> array.array(<span class="pl-s"><span class="pl-pds">&quot;</span>I<span class="pl-pds">&quot;</span></span>)</div><div class='line js-file-line' id='LC335'>&nbsp;&nbsp;&nbsp;&nbsp;reader.fromfile(data, num_links)</div><div class='line js-file-line' id='LC336'>&nbsp;&nbsp;&nbsp;&nbsp;links <span class="pl-k">=</span> reader.tolist()</div><div class='line js-file-line' id='LC337'>&nbsp;&nbsp;&nbsp;&nbsp;graph <span class="pl-k">=</span> nx.Graph()</div><div class='line js-file-line' id='LC338'>&nbsp;&nbsp;&nbsp;&nbsp;graph.add_nodes_from(<span class="pl-c1">range</span>(num_nodes))</div><div class='line js-file-line' id='LC339'>&nbsp;&nbsp;&nbsp;&nbsp;prec_deg <span class="pl-k">=</span> <span class="pl-c1">0</span></div><div class='line js-file-line' id='LC340'>&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC341'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> index <span class="pl-k">in</span> <span class="pl-c1">range</span>(num_nodes) :</div><div class='line js-file-line' id='LC342'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last_deg <span class="pl-k">=</span> cum_deg[index]</div><div class='line js-file-line' id='LC343'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neighbors <span class="pl-k">=</span> links[prec_deg:last_deg]</div><div class='line js-file-line' id='LC344'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.add_edges_from([(index, <span class="pl-c1">int</span>(neigh)) <span class="pl-k">for</span> neigh <span class="pl-k">in</span> neighbors])</div><div class='line js-file-line' id='LC345'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prec_deg <span class="pl-k">=</span> last_deg</div><div class='line js-file-line' id='LC346'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC347'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> graph</div><div class='line js-file-line' id='LC348'><br></div><div class='line js-file-line' id='LC349'><br></div><div class='line js-file-line' id='LC350'><span class="pl-k">def</span> <span class="pl-en">__one_level</span>(<span class="pl-smi">graph</span>, <span class="pl-smi">status</span>) :</div><div class='line js-file-line' id='LC351'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Compute one level of communities</span></div><div class='line js-file-line' id='LC352'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC353'>&nbsp;&nbsp;&nbsp;&nbsp;modif <span class="pl-k">=</span> <span class="pl-c1">True</span></div><div class='line js-file-line' id='LC354'>&nbsp;&nbsp;&nbsp;&nbsp;nb_pass_done <span class="pl-k">=</span> <span class="pl-c1">0</span></div><div class='line js-file-line' id='LC355'>&nbsp;&nbsp;&nbsp;&nbsp;cur_mod <span class="pl-k">=</span> __modularity(status)</div><div class='line js-file-line' id='LC356'>&nbsp;&nbsp;&nbsp;&nbsp;new_mod <span class="pl-k">=</span> cur_mod</div><div class='line js-file-line' id='LC357'>&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC358'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">while</span> modif  <span class="pl-k">and</span> nb_pass_done <span class="pl-k">!=</span> <span class="pl-c1">__PASS_MAX</span> :</div><div class='line js-file-line' id='LC359'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur_mod <span class="pl-k">=</span> new_mod</div><div class='line js-file-line' id='LC360'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modif <span class="pl-k">=</span> <span class="pl-c1">False</span></div><div class='line js-file-line' id='LC361'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nb_pass_done <span class="pl-k">+=</span> <span class="pl-c1">1</span></div><div class='line js-file-line' id='LC362'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC363'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> node <span class="pl-k">in</span> graph.nodes() :</div><div class='line js-file-line' id='LC364'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com_node <span class="pl-k">=</span> status.node2com[node]</div><div class='line js-file-line' id='LC365'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degc_totw <span class="pl-k">=</span> status.gdegrees.get(node, <span class="pl-c1">0</span>.) <span class="pl-k">/</span> (status.total_weight<span class="pl-k">*</span><span class="pl-c1">2</span>.)</div><div class='line js-file-line' id='LC366'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh_communities <span class="pl-k">=</span> __neighcom(node, graph, status)</div><div class='line js-file-line' id='LC367'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__remove(node, com_node,</div><div class='line js-file-line' id='LC368'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh_communities.get(com_node, <span class="pl-c1">0</span>.), status)</div><div class='line js-file-line' id='LC369'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;best_com <span class="pl-k">=</span> com_node</div><div class='line js-file-line' id='LC370'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;best_increase <span class="pl-k">=</span> <span class="pl-c1">0</span></div><div class='line js-file-line' id='LC371'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> com, dnc <span class="pl-k">in</span> neigh_communities.iteritems() :</div><div class='line js-file-line' id='LC372'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;incr <span class="pl-k">=</span>  dnc  <span class="pl-k">-</span> status.degrees.get(com, <span class="pl-c1">0</span>.) <span class="pl-k">*</span> degc_totw</div><div class='line js-file-line' id='LC373'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> incr <span class="pl-k">&gt;</span> best_increase :</div><div class='line js-file-line' id='LC374'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;best_increase <span class="pl-k">=</span> incr</div><div class='line js-file-line' id='LC375'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;best_com <span class="pl-k">=</span> com                    </div><div class='line js-file-line' id='LC376'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__insert(node, best_com,</div><div class='line js-file-line' id='LC377'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh_communities.get(best_com, <span class="pl-c1">0</span>.), status)</div><div class='line js-file-line' id='LC378'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> best_com <span class="pl-k">!=</span> com_node :</div><div class='line js-file-line' id='LC379'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modif <span class="pl-k">=</span> <span class="pl-c1">True</span>                </div><div class='line js-file-line' id='LC380'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_mod <span class="pl-k">=</span> __modularity(status)</div><div class='line js-file-line' id='LC381'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> new_mod <span class="pl-k">-</span> cur_mod <span class="pl-k">&lt;</span> <span class="pl-c1">__MIN</span> :</div><div class='line js-file-line' id='LC382'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">break</span></div><div class='line js-file-line' id='LC383'><br></div><div class='line js-file-line' id='LC384'><br></div><div class='line js-file-line' id='LC385'><span class="pl-k">class</span> <span class="pl-en">Status</span> :</div><div class='line js-file-line' id='LC386'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC387'><span class="pl-s">    To handle several data in one struct.</span></div><div class='line js-file-line' id='LC388'><span class="pl-s"></span></div><div class='line js-file-line' id='LC389'><span class="pl-s">    Could be replaced by named tuple, but don&#39;t want to depend on python 2.6</span></div><div class='line js-file-line' id='LC390'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC391'>&nbsp;&nbsp;&nbsp;&nbsp;node2com <span class="pl-k">=</span> {}</div><div class='line js-file-line' id='LC392'>&nbsp;&nbsp;&nbsp;&nbsp;total_weight <span class="pl-k">=</span> <span class="pl-c1">0</span></div><div class='line js-file-line' id='LC393'>&nbsp;&nbsp;&nbsp;&nbsp;internals <span class="pl-k">=</span> {}</div><div class='line js-file-line' id='LC394'>&nbsp;&nbsp;&nbsp;&nbsp;degrees <span class="pl-k">=</span> {}</div><div class='line js-file-line' id='LC395'>&nbsp;&nbsp;&nbsp;&nbsp;gdegrees <span class="pl-k">=</span> {}</div><div class='line js-file-line' id='LC396'>&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC397'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">def</span> <span class="pl-c1">__init__</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>) :</div><div class='line js-file-line' id='LC398'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.node2com <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC399'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.total_weight <span class="pl-k">=</span> <span class="pl-c1">0</span></div><div class='line js-file-line' id='LC400'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.degrees <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC401'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.gdegrees <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC402'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.internals <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC403'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.loops <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC404'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC405'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">def</span> <span class="pl-c1">__str__</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>) :</div><div class='line js-file-line' id='LC406'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>node2com : <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c1">str</span>(<span class="pl-c1">self</span>.node2com) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span> degrees : <span class="pl-pds">&quot;</span></span></div><div class='line js-file-line' id='LC407'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">+</span> <span class="pl-c1">str</span>(<span class="pl-c1">self</span>.degrees) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span> internals : <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c1">str</span>(<span class="pl-c1">self</span>.internals)</div><div class='line js-file-line' id='LC408'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span> total_weight : <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c1">str</span>(<span class="pl-c1">self</span>.total_weight))</div><div class='line js-file-line' id='LC409'><br></div><div class='line js-file-line' id='LC410'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">def</span> <span class="pl-en">copy</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>) :</div><div class='line js-file-line' id='LC411'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Perform a deep copy of status<span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC412'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_status <span class="pl-k">=</span> Status()</div><div class='line js-file-line' id='LC413'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_status.node2com <span class="pl-k">=</span> <span class="pl-c1">self</span>.node2com.copy()</div><div class='line js-file-line' id='LC414'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_status.internals <span class="pl-k">=</span> <span class="pl-c1">self</span>.internals.copy()</div><div class='line js-file-line' id='LC415'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_status.degrees <span class="pl-k">=</span> <span class="pl-c1">self</span>.degrees.copy()</div><div class='line js-file-line' id='LC416'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_status.gdegrees <span class="pl-k">=</span> <span class="pl-c1">self</span>.gdegrees.copy()</div><div class='line js-file-line' id='LC417'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_status.total_weight <span class="pl-k">=</span> <span class="pl-c1">self</span>.total_weight</div><div class='line js-file-line' id='LC418'><br></div><div class='line js-file-line' id='LC419'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">def</span> <span class="pl-en">init</span>(<span class="pl-smi"><span class="pl-smi">self</span></span>, <span class="pl-smi">graph</span>, <span class="pl-smi">part</span> <span class="pl-k">=</span> <span class="pl-c1">None</span>) :</div><div class='line js-file-line' id='LC420'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Initialize the status of a graph with every node in one community<span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC421'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count <span class="pl-k">=</span> <span class="pl-c1">0</span></div><div class='line js-file-line' id='LC422'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.node2com <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC423'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.total_weight <span class="pl-k">=</span> <span class="pl-c1">0</span></div><div class='line js-file-line' id='LC424'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.degrees <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC425'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.gdegrees <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC426'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.internals <span class="pl-k">=</span> <span class="pl-c1">dict</span>([])</div><div class='line js-file-line' id='LC427'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.total_weight <span class="pl-k">=</span> graph.size(<span class="pl-v">weight</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>weight<span class="pl-pds">&#39;</span></span>)</div><div class='line js-file-line' id='LC428'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> part <span class="pl-k">==</span> <span class="pl-c1">None</span> :</div><div class='line js-file-line' id='LC429'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> node <span class="pl-k">in</span> graph.nodes() :</div><div class='line js-file-line' id='LC430'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.node2com[node] <span class="pl-k">=</span> count</div><div class='line js-file-line' id='LC431'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deg <span class="pl-k">=</span> <span class="pl-c1">float</span>(graph.degree(node, <span class="pl-v">weight</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>weight<span class="pl-pds">&#39;</span></span>))</div><div class='line js-file-line' id='LC432'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.degrees[count] <span class="pl-k">=</span> deg</div><div class='line js-file-line' id='LC433'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.gdegrees[node] <span class="pl-k">=</span> deg</div><div class='line js-file-line' id='LC434'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.loops[node] <span class="pl-k">=</span> <span class="pl-c1">float</span>(graph.get_edge_data(node, node,</div><div class='line js-file-line' id='LC435'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<span class="pl-s"><span class="pl-pds">&quot;</span>weight<span class="pl-pds">&quot;</span></span>:<span class="pl-c1">0</span>}).get(<span class="pl-s"><span class="pl-pds">&quot;</span>weight<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">1</span>))</div><div class='line js-file-line' id='LC436'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.internals[count] <span class="pl-k">=</span> <span class="pl-c1">self</span>.loops[node]</div><div class='line js-file-line' id='LC437'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count <span class="pl-k">=</span> count <span class="pl-k">+</span> <span class="pl-c1">1</span></div><div class='line js-file-line' id='LC438'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">else</span> :</div><div class='line js-file-line' id='LC439'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> node <span class="pl-k">in</span> graph.nodes() :</div><div class='line js-file-line' id='LC440'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com <span class="pl-k">=</span> part[node]</div><div class='line js-file-line' id='LC441'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.node2com[node] <span class="pl-k">=</span> com</div><div class='line js-file-line' id='LC442'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deg <span class="pl-k">=</span> <span class="pl-c1">float</span>(graph.degree(node, <span class="pl-v">weigh</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>weight<span class="pl-pds">&#39;</span></span>))</div><div class='line js-file-line' id='LC443'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.degrees[com] <span class="pl-k">=</span> <span class="pl-c1">self</span>.degrees.get(com, <span class="pl-c1">0</span>) <span class="pl-k">+</span> deg</div><div class='line js-file-line' id='LC444'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.gdegrees[node] <span class="pl-k">=</span> deg</div><div class='line js-file-line' id='LC445'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc <span class="pl-k">=</span> <span class="pl-c1">0</span>.</div><div class='line js-file-line' id='LC446'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> neighbor, datas <span class="pl-k">in</span> graph[node].iteritems() :</div><div class='line js-file-line' id='LC447'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weight <span class="pl-k">=</span> datas.get(<span class="pl-s"><span class="pl-pds">&quot;</span>weight<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">1</span>)</div><div class='line js-file-line' id='LC448'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> part[neighbor] <span class="pl-k">==</span> com :</div><div class='line js-file-line' id='LC449'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> neighbor <span class="pl-k">==</span> node :</div><div class='line js-file-line' id='LC450'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc <span class="pl-k">+=</span> <span class="pl-c1">float</span>(weight)</div><div class='line js-file-line' id='LC451'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">else</span> :</div><div class='line js-file-line' id='LC452'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc <span class="pl-k">+=</span> <span class="pl-c1">float</span>(weight) <span class="pl-k">/</span> <span class="pl-c1">2</span>.</div><div class='line js-file-line' id='LC453'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">self</span>.internals[com] <span class="pl-k">=</span> <span class="pl-c1">self</span>.internals.get(com, <span class="pl-c1">0</span>) <span class="pl-k">+</span> inc</div><div class='line js-file-line' id='LC454'><br></div><div class='line js-file-line' id='LC455'><br></div><div class='line js-file-line' id='LC456'><br></div><div class='line js-file-line' id='LC457'><span class="pl-k">def</span> <span class="pl-en">__neighcom</span>(<span class="pl-smi">node</span>, <span class="pl-smi">graph</span>, <span class="pl-smi">status</span>) :</div><div class='line js-file-line' id='LC458'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC459'><span class="pl-s">    Compute the communities in the neighborood of node in the graph given</span></div><div class='line js-file-line' id='LC460'><span class="pl-s">    with the decomposition node2com</span></div><div class='line js-file-line' id='LC461'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC462'>&nbsp;&nbsp;&nbsp;&nbsp;weights <span class="pl-k">=</span> {}</div><div class='line js-file-line' id='LC463'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> neighbor, datas <span class="pl-k">in</span> graph[node].iteritems() :</div><div class='line js-file-line' id='LC464'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> neighbor <span class="pl-k">!=</span> node :</div><div class='line js-file-line' id='LC465'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weight <span class="pl-k">=</span> datas.get(<span class="pl-s"><span class="pl-pds">&quot;</span>weight<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">1</span>)</div><div class='line js-file-line' id='LC466'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neighborcom <span class="pl-k">=</span> status.node2com[neighbor]</div><div class='line js-file-line' id='LC467'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weights[neighborcom] <span class="pl-k">=</span> weights.get(neighborcom, <span class="pl-c1">0</span>) <span class="pl-k">+</span> weight</div><div class='line js-file-line' id='LC468'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC469'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> weights</div><div class='line js-file-line' id='LC470'><br></div><div class='line js-file-line' id='LC471'><br></div><div class='line js-file-line' id='LC472'><span class="pl-k">def</span> <span class="pl-en">__remove</span>(<span class="pl-smi">node</span>, <span class="pl-smi">com</span>, <span class="pl-smi">weight</span>, <span class="pl-smi">status</span>) :</div><div class='line js-file-line' id='LC473'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span> Remove node from community com and modify status<span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC474'>&nbsp;&nbsp;&nbsp;&nbsp;status.degrees[com] <span class="pl-k">=</span> ( status.degrees.get(com, <span class="pl-c1">0</span>.)</div><div class='line js-file-line' id='LC475'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">-</span> status.gdegrees.get(node, <span class="pl-c1">0</span>.) )</div><div class='line js-file-line' id='LC476'>&nbsp;&nbsp;&nbsp;&nbsp;status.internals[com] <span class="pl-k">=</span> <span class="pl-c1">float</span>( status.internals.get(com, <span class="pl-c1">0</span>.) <span class="pl-k">-</span></div><div class='line js-file-line' id='LC477'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weight <span class="pl-k">-</span> status.loops.get(node, <span class="pl-c1">0</span>.) )</div><div class='line js-file-line' id='LC478'>&nbsp;&nbsp;&nbsp;&nbsp;status.node2com[node] <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span></div><div class='line js-file-line' id='LC479'>&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC480'><br></div><div class='line js-file-line' id='LC481'><span class="pl-k">def</span> <span class="pl-en">__insert</span>(<span class="pl-smi">node</span>, <span class="pl-smi">com</span>, <span class="pl-smi">weight</span>, <span class="pl-smi">status</span>) :</div><div class='line js-file-line' id='LC482'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span> Insert node into community and modify status<span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC483'>&nbsp;&nbsp;&nbsp;&nbsp;status.node2com[node] <span class="pl-k">=</span> com</div><div class='line js-file-line' id='LC484'>&nbsp;&nbsp;&nbsp;&nbsp;status.degrees[com] <span class="pl-k">=</span> ( status.degrees.get(com, <span class="pl-c1">0</span>.) <span class="pl-k">+</span></div><div class='line js-file-line' id='LC485'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status.gdegrees.get(node, <span class="pl-c1">0</span>.) )</div><div class='line js-file-line' id='LC486'>&nbsp;&nbsp;&nbsp;&nbsp;status.internals[com] <span class="pl-k">=</span> <span class="pl-c1">float</span>( status.internals.get(com, <span class="pl-c1">0</span>.) <span class="pl-k">+</span></div><div class='line js-file-line' id='LC487'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weight <span class="pl-k">+</span> status.loops.get(node, <span class="pl-c1">0</span>.) )</div><div class='line js-file-line' id='LC488'><br></div><div class='line js-file-line' id='LC489'><br></div><div class='line js-file-line' id='LC490'><span class="pl-k">def</span> <span class="pl-en">__modularity</span>(<span class="pl-smi">status</span>) :</div><div class='line js-file-line' id='LC491'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC492'><span class="pl-s">    Compute the modularity of the partition of the graph faslty using status precomputed</span></div><div class='line js-file-line' id='LC493'><span class="pl-s">    <span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC494'>&nbsp;&nbsp;&nbsp;&nbsp;links <span class="pl-k">=</span> <span class="pl-c1">float</span>(status.total_weight)</div><div class='line js-file-line' id='LC495'>&nbsp;&nbsp;&nbsp;&nbsp;result <span class="pl-k">=</span> <span class="pl-c1">0</span>.</div><div class='line js-file-line' id='LC496'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> community <span class="pl-k">in</span> <span class="pl-c1">set</span>(status.node2com.values()) :</div><div class='line js-file-line' id='LC497'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in_degree <span class="pl-k">=</span> status.internals.get(community, <span class="pl-c1">0</span>.)</div><div class='line js-file-line' id='LC498'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degree <span class="pl-k">=</span> status.degrees.get(community, <span class="pl-c1">0</span>.)</div><div class='line js-file-line' id='LC499'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> links <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> :</div><div class='line js-file-line' id='LC500'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result <span class="pl-k">=</span> result <span class="pl-k">+</span> in_degree <span class="pl-k">/</span> links <span class="pl-k">-</span> ((degree <span class="pl-k">/</span> (<span class="pl-c1">2</span>.<span class="pl-k">*</span>links))<span class="pl-k">**</span><span class="pl-c1">2</span>)</div><div class='line js-file-line' id='LC501'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> result</div><div class='line js-file-line' id='LC502'><br></div><div class='line js-file-line' id='LC503'><br></div><div class='line js-file-line' id='LC504'><span class="pl-k">def</span> <span class="pl-en">__main</span>() :</div><div class='line js-file-line' id='LC505'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;&quot;&quot;</span>Main function to mimic C++ version behavior<span class="pl-pds">&quot;&quot;&quot;</span></span></div><div class='line js-file-line' id='LC506'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">try</span> :</div><div class='line js-file-line' id='LC507'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename <span class="pl-k">=</span> sys.argv[<span class="pl-c1">1</span>]</div><div class='line js-file-line' id='LC508'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graphfile <span class="pl-k">=</span> __load_binary(filename)</div><div class='line js-file-line' id='LC509'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition <span class="pl-k">=</span> best_partition(graphfile)</div><div class='line js-file-line' id='LC510'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">print</span> <span class="pl-k">&gt;&gt;</span> sys.stderr, <span class="pl-c1">str</span>(modularity(partition, graphfile))</div><div class='line js-file-line' id='LC511'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> elem, part <span class="pl-k">in</span> partition.iteritems() :</div><div class='line js-file-line' id='LC512'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">print</span> <span class="pl-c1">str</span>(elem) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c1">str</span>(part)</div><div class='line js-file-line' id='LC513'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">except</span> (<span class="pl-c1">IndexError</span>, <span class="pl-c1">IOError</span>):</div><div class='line js-file-line' id='LC514'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">print</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Usage : ./community filename<span class="pl-pds">&quot;</span></span></div><div class='line js-file-line' id='LC515'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">print</span> <span class="pl-s"><span class="pl-pds">&quot;</span>find the communities in graph filename and display the dendogram<span class="pl-pds">&quot;</span></span></div><div class='line js-file-line' id='LC516'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">print</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Parameters:<span class="pl-pds">&quot;</span></span></div><div class='line js-file-line' id='LC517'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">print</span> <span class="pl-s"><span class="pl-pds">&quot;</span>filename is a binary file as generated by the <span class="pl-pds">&quot;</span></span></div><div class='line js-file-line' id='LC518'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">print</span> <span class="pl-s"><span class="pl-pds">&quot;</span>convert utility distributed with the C implementation<span class="pl-pds">&quot;</span></span></div><div class='line js-file-line' id='LC519'><br></div><div class='line js-file-line' id='LC520'>&nbsp;&nbsp;&nbsp;&nbsp;</div><div class='line js-file-line' id='LC521'><br></div><div class='line js-file-line' id='LC522'><span class="pl-k">if</span> <span class="pl-c1">__name__</span> <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&quot;</span>__main__<span class="pl-pds">&quot;</span></span> :</div><div class='line js-file-line' id='LC523'>&nbsp;&nbsp;&nbsp;&nbsp;__main()</div><div class='line js-file-line' id='LC524'><br></div></pre></div></div>
  </div>


  <footer class="clearfix">
    <div class="container">
      <a href="#"><svg height="32" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="32" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg></a>

      <ul class="clearfix">
        <li>
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-mobile-preference-form" action="/site/mobile_preference" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="9WghKhj8xgMtl9OH05oapxa4pfyOvWYIZAx3/XM9eewfMVv2SlzxROk2fVBth3LgHPyByNm7BQgU8COLi7DIfA==" />
            <input type="hidden" name="mobile" value="false">
            <input type="hidden" name="anchor" class="js-mobile-preference-anchor-field">

            <button type="submit" class="switch-to-desktop" data-ga-click="Mobile, switch to desktop, switch button">
              Desktop version
            </button>
</form>        </li>
        <li>
          <a href="/logout" data-ga-click="Mobile, tap, location:header; text:Sign out">
            Sign out
          </a>
        </li>
      </ul>
    </div>
  </footer>
  
    <script crossorigin="anonymous" async="async" integrity="sha512-mIReH+yA7eVQ/ft+uEISUOeBTAulN6Y03IPf4vZttq4l6FlOt3sl8uJ0s/7fQE2cqCSKbsJRtatRji3l+LZFFQ==" type="application/javascript" src="https://assets-cdn.github.com/assets/mobile-5be8a940455efa95c152e49c8abca017.js"></script>

  </body>
</html>
